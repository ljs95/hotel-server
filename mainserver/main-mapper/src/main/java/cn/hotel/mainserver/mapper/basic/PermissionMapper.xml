<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.hotel.mainserver.mapper.basic.PermissionMapper">
  <resultMap id="BaseResultMap" type="cn.hotel.mainserver.model.basic.Permission">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="pid" jdbcType="INTEGER" property="pid" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="url" jdbcType="VARCHAR" property="url" />
    <result column="enabled" jdbcType="BIT" property="enabled" />
    <result column="list_order" jdbcType="INTEGER" property="listOrder" />
  </resultMap>
  <sql id="Base_Column_List">
    id, pid, name, url, enabled, list_order
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from permission
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="all" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"/> from permission
    <if test="enabled != null">
      where enabled = #{enabled}
    </if>
    order by list_order, id
  </select>
  <select id="selectByRoleId" resultMap="BaseResultMap">
    SELECT
        p.id,
        p.pid,
        p.name,
        p.url,
        p.enabled,
        p.list_order
    FROM
        permission AS p,
        role_permission rp
    WHERE
        p.id = rp.pid
        AND rp.rid = #{roleId}
    ORDER BY
        list_order
  </select>
  <select id="selectPermissionByRoleIds" parameterType="collection" resultMap="BaseResultMap">
    select distinct p.* from(select p.* from permission as p, role_permission rp where p.id = rp.pid and rp.rid in
    <foreach collection="list" item="roleId" open="(" separator=","  close=")">
      #{roleId}
    </foreach>
    order by p.list_order) as p
  </select>
  <resultMap id="withRoleMap" type="cn.hotel.mainserver.model.basic.Permission" extends="BaseResultMap">
    <collection property="roles" ofType="cn.hotel.mainserver.model.basic.Role">
      <id column="rid" property="id" javaType="INTEGER"/>
      <result column="rname" property="name" jdbcType="VARCHAR"/>
      <result column="ralias" property="alias" jdbcType="VARCHAR"/>
      <result column="rremark" property="remark" jdbcType="VARCHAR"/>
    </collection>
  </resultMap>
  <select id="getPermissionWithRolesByUrl" parameterType="string" resultMap="withRoleMap">
    SELECT
        p.*,
        r.id AS rid,
        r.NAME AS rname,
        r.alias AS ralias,
        r.remark AS rremark
    FROM
        permission p
        LEFT JOIN role_permission rp ON p.id = rp.pid
        LEFT JOIN role r ON rp.rid = r.id
    WHERE
        p.enabled = '1'
        AND p.url = #{url}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from permission
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.hotel.mainserver.model.basic.Permission">
    insert into permission (pid, name, url, enabled, list_order)
    values (#{pid,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
      #{url,jdbcType=VARCHAR}, #{enabled,jdbcType=BIT}, #{listOrder,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="cn.hotel.mainserver.model.basic.Permission">
    insert into permission
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="pid != null">
        pid,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="url != null">
        url,
      </if>
      <if test="enabled != null">
        enabled,
      </if>
      <if test="listOrder != null">
        list_order,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="pid != null">
        #{pid,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="enabled != null">
        #{enabled,jdbcType=BIT},
      </if>
      <if test="listOrder != null">
        #{listOrder,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.hotel.mainserver.model.basic.Permission">
    update permission
    <set>
      <if test="pid != null">
        pid = #{pid,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="enabled != null">
        enabled = #{enabled,jdbcType=BIT},
      </if>
      <if test="listOrder != null">
        list_order = #{listOrder,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.hotel.mainserver.model.basic.Permission">
    update permission
    set pid = #{pid,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      enabled = #{enabled,jdbcType=BIT},
      list_order = #{listOrder,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

</mapper>