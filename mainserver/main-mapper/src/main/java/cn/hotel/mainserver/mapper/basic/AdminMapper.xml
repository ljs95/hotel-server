<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.hotel.mainserver.mapper.basic.AdminMapper">
    <resultMap id="BaseResultMap" type="cn.hotel.mainserver.model.basic.Admin">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="nickname" property="nickname" jdbcType="VARCHAR"/>
        <result column="enabled" property="enabled" jdbcType="BIT"/>
        <result column="user_img" property="userImg" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, username, nickname, enabled, user_img
    </sql>
    <sql id="Base_Column_List_Password">
        <include refid="Base_Column_List"/>, password
    </sql>
    <insert id="insert" parameterType="cn.hotel.mainserver.model.basic.Admin" useGeneratedKeys="true" keyProperty="id">
        insert into admin(username, password,
          nickname, enabled, user_img)
        values (#{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
          #{nickname,jdbcType=VARCHAR}, #{enabled,jdbcType=BIT}, #{userImg,jdbcType=VARCHAR})
    </insert>
    <insert id="insertAdminRole" parameterType="Map">
        insert into admin_role(aid, rid) values
        <foreach collection="roleIds" separator="," item="roleId">
            (#{adminId},#{roleId})
        </foreach>
    </insert>
    <update id="update" parameterType="cn.hotel.mainserver.model.basic.Admin">
        update admin
        <set>
            <if test="password != null">
                password = #{password},
            </if>
            <if test="nickname != null">
                nickname = #{nickname},
            </if>
            <if test="userImg != null">
                user_img = #{userImg},
            </if>
            <if test="enabled != null">
                enabled = #{enabled},
            </if>
        </set>
        where id = #{id}
    </update>
    <delete id="delete" parameterType="Integer">
        delete from admin where id = #{id}
    </delete>
    <delete id="deleteAdminRole" parameterType="integer">
        delete from admin_role where aid = #{id}
    </delete>
    <select id="loadUserByUsername" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List_Password"/>
        from admin where username = #{username}
    </select>
    <resultMap id="withRoleMap" type="cn.hotel.mainserver.model.basic.Admin" extends="BaseResultMap">
        <collection property="roles" ofType="cn.hotel.mainserver.model.basic.Role">
            <id column="rid" property="id"/>
            <result column="rname" property="name"/>
            <result column="ralias" property="alias"/>
            <result column="rremark" property="remark"/>
        </collection>
    </resultMap>
    <select id="table" resultMap="withRoleMap">
        SELECT
            a.*,
            r.id AS rid,
            r.NAME AS rname,
            r.alias AS ralias,
            r.remark AS rremark
        FROM
            admin AS a,
            admin_role AS ar,
            role AS r
        WHERE
            a.id = ar.aid
            AND ar.rid = r.id
        <if test="username != null and username != ''">
            and a.username like CONCAT(#{username}, '%')
        </if>
        <if test="nickname != null and nickname != ''">
            and a.nickname like CONCAT(#{nickname}, '%')
        </if>
        <if test="enabled != null">
            and a.enabled = #{enabled}
        </if>
    </select>
    <select id="findById" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from admin where id = #{id}
    </select>
</mapper>